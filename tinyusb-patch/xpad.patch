diff --git a/hw/bsp/rp2040/family.cmake b/hw/bsp/rp2040/family.cmake
index 1aa180ef..894620fc 100644
--- a/hw/bsp/rp2040/family.cmake
+++ b/hw/bsp/rp2040/family.cmake
@@ -89,6 +89,7 @@ if (NOT TARGET _rp2040_family_inclusion_marker)
 			${TOP}/src/class/hid/hid_host.c
 			${TOP}/src/class/msc/msc_host.c
 			${TOP}/src/class/vendor/vendor_host.c
+			${TOP}/src/class/xpad/xpad_host.c
 			)
 
 	# Sometimes have to do host specific actions in mostly
diff --git a/src/class/hid/hid_host.c b/src/class/hid/hid_host.c
index ac260d39..07fc1fe0 100644
--- a/src/class/hid/hid_host.c
+++ b/src/class/hid/hid_host.c
@@ -257,6 +257,7 @@ void hidh_close(uint8_t dev_addr)
 //--------------------------------------------------------------------+
 
 static bool config_set_protocol             (uint8_t dev_addr, tusb_control_request_t const * request, xfer_result_t result);
+static bool config_get_protocol             (uint8_t dev_addr, tusb_control_request_t const * request, xfer_result_t result);
 static bool config_get_report_desc          (uint8_t dev_addr, tusb_control_request_t const * request, xfer_result_t result);
 static bool config_get_report_desc_complete (uint8_t dev_addr, tusb_control_request_t const * request, xfer_result_t result);
 
@@ -370,12 +371,43 @@ static bool config_set_protocol(uint8_t dev_addr, tusb_control_request_t const *
       .direction = TUSB_DIR_OUT
     },
     .bRequest = HID_REQ_CONTROL_SET_PROTOCOL,
-    .wValue   = HID_PROTOCOL_BOOT,
+//    .wValue   = HID_PROTOCOL_BOOT,
+    .wValue   = HID_PROTOCOL_REPORT,
     .wIndex   = hid_itf->itf_num,
     .wLength  = 0
   };
 
-  TU_ASSERT( tuh_control_xfer(dev_addr, &new_request, NULL, config_get_report_desc) );
+  TU_ASSERT( tuh_control_xfer(dev_addr, &new_request, NULL, config_get_protocol) );
+  return true;
+}
+
+// Force device to work in BOOT protocol
+static bool config_get_protocol(uint8_t dev_addr, tusb_control_request_t const * request, xfer_result_t result)
+{
+  // Stall is a valid response for SET_IDLE, therefore we could ignore its result
+  (void) result;
+
+  uint8_t const itf_num     = (uint8_t) request->wIndex;
+  uint8_t const instance    = get_instance_id_by_itfnum(dev_addr, itf_num);
+  hidh_interface_t* hid_itf = get_instance(dev_addr, instance);
+
+  TU_LOG2("HID Get Protocol to Boot Mode\r\n");
+  hid_itf->protocol_mode = HID_PROTOCOL_BOOT;
+  tusb_control_request_t const new_request =
+  {
+    .bmRequestType_bit =
+    {
+      .recipient = TUSB_REQ_RCPT_INTERFACE,
+      .type      = TUSB_REQ_TYPE_CLASS,
+      .direction = TUSB_DIR_IN
+    },
+    .bRequest = HID_REQ_CONTROL_GET_PROTOCOL,
+    .wValue   = 0,
+    .wIndex   = hid_itf->itf_num,
+    .wLength  = 1
+  };
+
+  TU_ASSERT( tuh_control_xfer(dev_addr, &new_request, usbh_get_enum_buf(), config_get_report_desc) );
   return true;
 }
 
@@ -392,6 +424,11 @@ static bool config_get_report_desc(uint8_t dev_addr, tusb_control_request_t cons
   uint8_t const instance    = get_instance_id_by_itfnum(dev_addr, itf_num);
   hidh_interface_t* hid_itf = get_instance(dev_addr, instance);
 
+  if (hid_itf->itf_protocol != HID_ITF_PROTOCOL_NONE) {
+    uint8_t const* desc_report = usbh_get_enum_buf();
+    hid_itf->protocol_mode = desc_report[0];
+  }
+
   // Get Report Descriptor if possible
   // using usbh enumeration buffer since report descriptor can be very long
   if( hid_itf->report_desc_len > CFG_TUH_ENUMERATION_BUFSIZE )
diff --git a/src/host/usbh.c b/src/host/usbh.c
index 2ef936ad..95fc723c 100644
--- a/src/host/usbh.c
+++ b/src/host/usbh.c
@@ -183,6 +183,17 @@ static usbh_class_driver_t const usbh_class_drivers[] =
       .close      = cush_close
     }
   #endif
+
+  #if CFG_TUH_XPAD
+    {
+      DRIVER_NAME("XPAD")
+      .init       = xpadh_init,
+      .open       = xpadh_open,
+      .set_config = xpadh_set_config,
+      .xfer_cb    = xpadh_xfer_cb,
+      .close      = xpadh_close
+    }
+  #endif
 };
 
 enum { USBH_CLASS_DRIVER_COUNT = TU_ARRAY_SIZE(usbh_class_drivers) };
@@ -869,6 +880,7 @@ static bool enum_get_device_desc_complete(uint8_t dev_addr, tusb_control_request
 //  if (tuh_attach_cb) tuh_attach_cb((tusb_desc_device_t*) _usbh_ctrl_buf);
 
   TU_LOG2("Get 9 bytes of Configuration Descriptor\r\n");
+  sleep_ms(100);
   tusb_control_request_t const new_request =
   {
     .bmRequestType_bit =
diff --git a/src/portable/raspberrypi/rp2040/hcd_rp2040.c b/src/portable/raspberrypi/rp2040/hcd_rp2040.c
index 5e5bb490..3036af16 100644
--- a/src/portable/raspberrypi/rp2040/hcd_rp2040.c
+++ b/src/portable/raspberrypi/rp2040/hcd_rp2040.c
@@ -331,7 +331,12 @@ static void _hw_endpoint_init(struct hw_endpoint *ep, uint8_t dev_addr, uint8_t
         uint32_t reg = dev_addr | (num << USB_ADDR_ENDP1_ENDPOINT_LSB);
         // Assert the interrupt endpoint is IN_TO_HOST
         // TODO Interrupt can also be OUT
-        assert(dir == TUSB_DIR_IN);
+        //assert(dir == TUSB_DIR_IN);
+
+        if (dir == TUSB_DIR_OUT)
+        {
+            reg |= USB_ADDR_ENDP1_INTEP_DIR_BITS;
+        }
 
         if (need_pre(dev_addr))
         {
diff --git a/src/tusb.h b/src/tusb.h
index 0d29e106..50263d38 100644
--- a/src/tusb.h
+++ b/src/tusb.h
@@ -58,6 +58,10 @@
     #include "class/vendor/vendor_host.h"
   #endif
 
+  #if CFG_TUH_XPAD
+    #include "class/xpad/xpad_host.h"
+  #endif
+
 #endif
 
 //------------- DEVICE -------------//
diff --git a/src/tusb_option.h b/src/tusb_option.h
index e49fc011..eccc68ba 100644
--- a/src/tusb_option.h
+++ b/src/tusb_option.h
@@ -321,6 +321,10 @@
 #define CFG_TUH_VENDOR 0
 #endif
 
+#ifndef CFG_TUH_XPAD
+#define CFG_TUH_XPAD 0
+#endif
+
 //--------------------------------------------------------------------+
 // Port Specific
 // TUP stand for TinyUSB Port (can be renamed)
